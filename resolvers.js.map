{"version":3,"sources":["../src/resolvers.js"],"names":["Pizzas_Registro","fs","readFileSync","Pizzas","JSON","parse","json_ingredi","ingredientes","resolvers","Query","hello","greet","root","args","console","log","saludo","nombre","par","numero","varios","i","num","ingrediente","id","dato","find","elemento","pizzas","copia","npizzas","forEach","element","nuevaPizza","precio","id_ingredientes","ingre","push","pizza","Mutation","createIngrediente","_","input","toLowerCase","nuevoIngrediente","length","stringify","ingredientes_json","writeFileSync"],"mappings":"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","sourcesContent":["const Pizzas_Registro = fs.readFileSync(\"src/public/Pizzas.json\", \"utf-8\");\nconst Pizzas = JSON.parse(Pizzas_Registro);\n\n//Crear funciones\nimport fs from \"fs\";\nconst json_ingredi = fs.readFileSync(\"src/public/ingredientes.json\", \"utf-8\");\nconst ingredientes = JSON.parse(json_ingredi);\n\nexport const resolvers = {\n  Query: {\n    hello: () => {\n      return \"Hello\";\n    },\n    greet(root, args) {\n      console.log(args);\n      return \"Hola\";\n    },\n    saludo(root, args) {\n      return `Hola ${args.nombre}`;\n    },\n    par(root, args) {\n      console.log(args, root);\n      if (root) {\n        return root.numero % 2 == 0;\n      } else {\n        return args.numero % 2 == 0;\n      }\n    },\n    varios(root, args) {\n      for (let i = 0; i < args.num; i++) {\n        console.log(i);\n      }\n\n      return this.par({ numero: args.num }) ? true : false;\n    },\n    ingredientes() {\n      return ingredientes;\n    },\n    ingrediente(root, args) {\n      const { nombre, id } = args ? args : root;      \n      if (id || nombre) {\n        const dato = id\n          ? ingredientes.find((elemento) => elemento.id == id)\n          : ingredientes.find((elemento) => elemento.nombre == nombre);\n        return dato;\n      } else {\n        return null;\n      }\n    },\n    pizzas(root, args) {      \n      if (!(args || root)) {\n        const copia = Pizzas;\n        const npizzas = [];\n        copia.forEach((element) => {\n          const nuevaPizza = {\n            id: element.id,\n            nombre: element.nombre,\n            precio: element.precio,\n            ingredientes: [],\n          };\n          element.id_ingredientes.forEach((ingre) => {\n            const dato = ingredientes.find((elemento) => elemento.id == ingre);\n            nuevaPizza.ingredientes.push(dato);\n          });\n          npizzas.push(nuevaPizza);\n        });\n        return npizzas;\n      } else if (args || root) {\n        const {id} = args ? args:root        \n        if(id){\n          const pizza = Pizzas.find((element) => element.id == id);\n\n        const nuevaPizza = {\n          id: pizza.id,\n          nombre: pizza.nombre,\n          precio: pizza.precio,\n          ingredientes: [],\n        };\n\n        pizza.id_ingredientes.forEach((ingre) => {\n          const dato = ingredientes.find((elemento) => elemento.id == ingre);\n          nuevaPizza.ingredientes.push(dato);\n        });\n\n        return [nuevaPizza];\n        }\n        \n      }\n      return null\n    },\n  },\n  Mutation:{\n    async createIngrediente(_,args){\n      if(args){\n        const {nombre} = args.input\n        console.log(nombre);  \n        const dato = ingredientes.find((elemento) => elemento.nombre.toLowerCase() == nombre.toLowerCase());\n        if(dato){\n          return null\n        }\n        else{\n          const nuevoIngrediente = {\n            id: ingredientes.length,\n            nombre:nombre\n          }\n          ingredientes.push(nuevoIngrediente)\n          const ingredientes_json = await JSON.stringify(ingredientes,null, 2)      \n           fs.writeFileSync(\"src/public/ingredientes.json\", ingredientes_json,\"utf-8\");\n          return nuevoIngrediente\n        }\n      \n      }else{\n        return null\n      }\n      \n      \n    }\n  }\n};\n"],"file":"resolvers.js"}